# #########
#
#	Статический анализ кода
#
LINTFLAGS		= -std=gnu99
#флаг установки стандарта языка си C90 по ISO / IEC 9899: 1990

LINTFLAGS		+= -pedantic
#флаг включающий предуприждения если код не соответсвует установленному стандарту

LINTFLAGS		+= -Wall
#флаг включающий ряд предуприждений.

#флаг -wall включает следующие предупреждения:
##########################################################################################
# -Waddress                                                          флаг предупреждения о неправильном использовании адресных выражений
# -Warray-bounds=1 (only with -O2)                                   флаг предупреждения о попытке обращения к значениям выходящем за нижние индексы массивов
# -Warray-compare                                                    флаг предупреждения о неправильном стравнении массивов
# -Warray-parameter=2 (C and Objective-C only)                       флаг предупреждения о повторных объявлениях функций с несовпадающими типами массивов в качестве аргументов
# -Wbool-compare                                                     флаг предупреждения о неккоректном сравнении целочисленных значений: n = 5 ... ((n > 1) == 2)
# -Wbool-operation                                                   флаг предупреждения о подозрительных выражениях логического типа
# -Wc++11-compat  -Wc++14-compat                                     флаги предупреждения о конструкциях отсутствующих в соответсвующих стандартах ISO для с++
# -Wcatch-value (C++ and Objective-C++ only)                         флаг с++ предупреждает ообработчиках исключений, которые принимают полиморфные объекты по значению
# -Wchar-subscripts                                                  флаг предупреждает о использовании char в качестве индекса массива
# -Wcomment                                                          флаг предупреждает о наличии последовательности начинающий новый комментарий внутри конструкции многострочного комментария /* comment '/*' */ или о разрыве строки с помощью обратного слэша внутри однострочного комментария // comment'\'
# -Wdangling-pointer=2                                               флаг предупреждает о использовании указателкй на объекты с автоматическим сроком хранения после окончания их срока службы, а также диагностирует условное использование висячих указателей
# -Wduplicate-decl-specifier (C and Objective-C only)                флаг предупреждения если объявление имеет дубликат const, volatile, restrict или _Atomic спецификатор
# -Wenum-compare (in C/ObjC; this is on by default in C++)           флаг предупреждения о сравнении значений разных типов
# -Wenum-int-mismatch (C and Objective-C only)                       предупреждение о несоответсвии перечисляемого типа с типом в объявлениях
# -Wformat                                                           проверка форматов в вызовах printf scanf и т.д в случае если типы переменных не совпадают с типом в формате выдает предупреждение
# -Wformat-overflow                                                  предупреждение о вызовах форматированных функций ввода / вывода, таких как sprintf и vsprintf, которые могут переполнить целевой буфер
# -Wformat-truncation                                                предупреждение о вызовах форматированных функций ввода / вывода, таких как snprintf и vsnprintf, которые могут привести к усечению вывода
# -Wint-in-bool-context                                              предупреждение о подозрительном использовании целочисленных значений, где ожидаются логические значения, такие как условные выражения (?:), использующие не логические целочисленные константы в логическом контексте, например if (a <= b ? 2 : 3)
# -Wimplicit (C and Objective-C only)                                включает предупреждение когда функция используется до ее объявления и когда в объявлении не указан тип
# -Wimplicit-int (C and Objective-C only)                            включает предупреждение когда в объявлении не указан тип
# -Wimplicit-function-declaration (C and Objective-C only)           включает предупреждение когда функция используется до ее объявления
# -Winit-self (only for C++)                                         предупреждение в случае если используется неинициализированный параметр
# -Wlogical-not-parentheses                                          предупреждение о том, что логический не используется в левом операнде сравнения (!a> 1)
# -Wmain (only for C/ObjC and unless -ffreestanding)                 предупреждение, если тип mainявляется подозрительным. mainдолжна быть функция с внешней связью, возвращающая int, принимающая либо нулевые аргументы, либо два, либо три аргумента соответствующих типов
# -Wmaybe-uninitialized                                              предупреждение о том, что существует возможность использования непроинициализированной переменной
# -Wmemset-elt-size                                                  предупреждение о подозрительных вызовах memset встроенной функции, если первый аргумент ссылается на массив, а третий аргумент является числом, равным количеству элементов, но не равным размеру массива в памяти
# -Wmemset-transposed-args                                           предупреждение о подозрительных вызовах memset встроенной функции, где второй аргумент не равен нулю, а третий аргумент равен нулю
# -Wmisleading-indentation (only for C/C++)                          предупреждение о том, что отступы в коде не отражают структуру этого кода
# -Wmismatched-dealloc                                               предупреждение о вызовах функций освобождения с аргументами указателя, возвращаемыми из функций выделения, для которых первый не является подходящим средством освобождения
# -Wmismatched-new-delete (only for C/C++)                           предупреждение соответствует Wmismatched-dealloc в с++ для операторов new и delete
# -Wmissing-attributes                                               предупреждение когда в объявлении функции отсутствует один или несколько атрибутов, с которыми объявляется связанная функция и отсутствие которых может отрицательно повлиять на корректность или эффективность сгенерированного кода
# -Wmissing-braces (only for C/ObjC)                                 предупреждение, если инициализатор массива или объединения заключен в фигурные скобки не полностью a[2][2] = { 0, 1, 2, 3 };
# -Wmultistatement-macros                                            предупреждение о макросах, состоящих из нескольких инструкций, и используемых в выражениях if, else, while и for
# -Wnarrowing (only for C++)                                         предупреждение  о конструкциях C++, значение которых отличается в ISO C++ 1998 и ISO C++ 2011
# -Wnonnull                                                          предупреждение о передаче нулевого указателя в функцию, аргументы которой помечены атрибутом nonnull
# -Wnonnull-compare                                                  предупреждение о сравнении с нулём аргумента функции, помеченного атрибутом nonnull
# -Wopenmp-simd                                                      предупреждение, если модель затрат векторизатора переопределяет директиву OpenMP simd, заданную пользователем
# -Wparentheses                                                      предупреждение, если круглые скобки опущены в определенных контекстах, например, когда есть присваивание в контексте, где ожидается значение истинности, или когда операторы являются вложенными, о приоритете которых люди часто путаются if(x = n)
# -Wpessimizing-move (only for C++)                                  предупреждение когда явная попытка переноса может ухудшить производительность
# -Wpointer-sign                                                     предупреждение о передаче или назначении аргумента указателя с другой подписью
# -Wrange-loop-construct (only for C++)                              предупреждение о ненужных копиях
# -Wreorder                                                          предупреждение о том, что порядок инициализации членов класса не соответствует порядку их объявления.
# -Wrestrict                                                         предупреждение, когда объект, на который ссылается параметр с ограничениями, заменяется другим аргументом, или когда копии между такими объектами перекрываются a[] = "abcd1234" strcpy (a, a + n)
# -Wreturn-type                                                      предупреждение о том, что из функции не вернули заявленный результат
# -Wself-move (only for C++)                                         предупреждение о явном перемещении переменной в саму себя
# -Wsequence-point                                                   предупреждение о подозрительных операциях относительно точек следования ++a = a++
# -Wsign-compare (only in C++)                                       предупреждение о сравнении знаковых и беззнаковых чисел, которое может произвести некорректный результат из-за неявных преобразований
# -Wsizeof-array-div                                                 предупреждение о разделении двух операторов sizeof, когда первый применяется к массиву, а делитель не равен размеру элемента массива int arr[10] sizeof (arr) / sizeof (short)
# -Wsizeof-pointer-div                                               предупреждение о подозрительном делении друг на друга двух результатов выражения sizeof, когда размер указателя делится на размер объекта char *a = "12345" sizeof (a) / sizeof (a[0])
# -Wsizeof-pointer-memaccess                                         предупреждение о подозрительных параметрах, передаваемых в строковые функции и функции для работы с памятью использующих оператор sizeof char a[10] const char * s = "qwerty" memcpy (a, s, sizeof(s))
# -Wstrict-aliasing                                                  предупреждение о коде, который может нарушить строгие правила псевдонимов, используемые компилятором для оптимизации
# -Wstrict-overflow=1                                                предупреждение о случаях, когда компилятор оптимизирует, исходя из предположения, что переполнения со знаком не происходит например компилятор упрощает x + 1 > x в 1
# -Wswitch                                                           предупреждение о том, что не все элементы перечисления задействованы в конструкции switch
# -Wtautological-compare                                             предупреждение о бессмысленном сравнении переменной с самой собой
# -Wtrigraphs                                                        предупреждение о наличии триграфов, которые могут изменить смысл программы
# -Wuninitialized                                                    предупреждение об использовании переменных и членов класса, которые не были проинициализированы
# -Wunknown-pragmas                                                  предупреждение, когда встречается директива #pragma, которая не понятна GCC
# -Wunused-function                                                  предупреждение всякий раз, когда статическая функция объявлена, но не определена, или не встроенная статическая функция не используется
# -Wunused-label                                                     предупреждение всякий раз, когда метка объявлена, но не используется
# -Wunused-value                                                     предупреждение всякий раз, когда оператор вычисляет результат, который явно не используется
# -Wunused-variable                                                  предупреждение всякий раз, когда локальная или статическая переменная не используется
# -Wuse-after-free=3                                                 предупреждение если указатель кучи продолжает использоваться уже после ее освобождения
# -Wvla-parameter (C and Objective-C only)                           предупреждение о повторных объявлениях функций, включающих аргументы типов массивов переменной длины несогласованных видов или форм
# -Wvolatile-register-var                                            предупреждение, если переменная регистра объявлена изменчивой
# -Wzero-length-bounds                                               предупреждение о доступе к элементам элементов массива нулевой длины, которые могут перекрывать другие элементы того же объекта.
##################################################################################################################

LINTFLAGS		+= -Wextra
#флаг включающий ряд предуприждений.

#флаг -Wextra включает следующие предупреждения:
####################################################################################################################
# -Wclobbered                                                        предупреждение о переменных, которые могут быть изменены longjmp или vfork
# -Wcast-function-type                                               предупреждение, когда указатель функции преобразуется в несовместимый указатель функции.
# -Wdeprecated-copy (C++ only)                                       предупреждение о копировании для неявного конструктора копирования и оператора присваивания
# -Wempty-body                                                       предупреждение о пустом теле условных выражений или цикла do-while if (true)';'{....}
# -Wenum-conversion (C only)                                         предупреждение, когда значение перечисляемого типа неявно преобразуется в другой перечисляемый тип
# -Wignored-qualifiers                                               предупреждение, если возвращаемый тип функции имеет определитель типа, такой как const
# -Wimplicit-fallthrough=3                                           предупреждение о "проваливании" в операторе switch
# -Wmissing-field-initializers                                       предупреждение, если в инициализаторе структуры отсутствуют некоторые поля.
# -Wmissing-parameter-type (C only)                                  предупреждение если параметр функции объявляется без спецификатора типа
# -Wold-style-declaration (C only)                                   предупреждение об устаревшем использовании в соответствии со стандартом C в декларации.
# -Woverride-init                                                    предупреждение, если инициализированное поле без побочных эффектов переопределяется при использовании назначенных инициализаторов
# -Wsign-compare (only in C++)                                       предупреждение о сравнении знаковых и беззнаковых чисел, которое может произвести некорректный результат из-за неявных преобразований)
# -Wstring-compare                                                   предупреждение о вызовах strcmp и strncmp, результат которых определяется как нулевой или ненулевой в тестах на такое равенство из-за того, что длина одного аргумента больше размера массива, в котором хранится другой аргумент (или границы в случае strncmp)
# -Wredundant-move (only for C++)                                    предупреждение о ненужном вызове std::move в случаях, когда компилятор сам сделает всё, что нужно
# -Wtype-limits                                                      предупреждение о сравнениях, которые всегда имеют один и тот же результат.
# -Wuninitialized                                                    предупреждение об использовании переменных и членов класса, которые не были проинициализированы
# -Wshift-negative-value (in C++11 to C++17 and in C99 and newer)    предупреждение об операциях сдвига для отрицательных значений
# -Wunused-parameter (only with -Wunused or -Wall)                   предупреждение о неиспользуемом параметре функции
# -Wunused-but-set-parameter (only with -Wunused or -Wall)           предупреждение о том, что в параметр функции было записано значение, но после этого он ни разу не использовался
####################################################################################################################

LINTFLAGS		+= -Wconversion
#предупреждение о неявных сужающих (то есть потенциально приводящих к потере информации) преобразований

LINTFLAGS		+= -Wsign-conversion
#предупреждение о неявных знаковых преобразованиях которые могут привести к некорректным значениям

LINTFLAGS		+= -Winit-self
#предупреждение в случае если используется неинициализированный параметр

LINTFLAGS		+= -Wunreachable-code
#предупреждение о участказ кода, которые никогда не будут выполнены

LINTFLAGS		+= -Wformat-y2k
#предупреждение если указан параметр -Wformat, также предупреждает о форматах strftime, которые могут давать только двузначный год

//LINTFLAGS		+= -Wformat-nonliteral
#предупреждение если указан параметр -Wformat, также предупреждает, если строка формата не является строковым литералом и поэтому не может быть проверена, если только функция format не принимает свои аргументы формата в качестве va_list.

LINTFLAGS		+= -Wformat-security
#предупреждение если указан параметр -Wformat, также предупреждает об использовании функций форматирования, которые представляют возможные проблемы безопасности. В настоящее время это предупреждает о вызовах функций printf и scanf, где строка формата не является строковым литералом и нет аргументов формата

LINTFLAGS		+= -Wmissing-include-dirs
#предупреждение, если предоставленный пользователем каталог include не существует

LINTFLAGS		+= -Wtrigraphs
#предупреждение о наличии триграфов, которые могут изменить смысл программы.

LINTFLAGS		+= -Wstrict-overflow=5
#предупреждение о случаях, когда компилятор уменьшает величину константы, участвующей в сравнении. Например: x + 2 > y упрощается до x + 1 >= y.

LINTFLAGS		+= -Wfloat-equal
#предупреждение, если при сравнении равенства используются значения с плавающей запятой.

LINTFLAGS		+= -Wundef
#предупреждение, если в директиве #if вычисляется неопределенный идентификатор

LINTFLAGS		+= -Wshadow
#предупреждение, когда объявление локальной переменной или типа затеняет другую переменную

LINTFLAGS		+= -Wbad-function-cast
#предупреждение, когда вызов функции приводится к несоответствующему типу.

LINTFLAGS		+= -Wlogical-op
#предупреждение о подозрительном использовании логических операторов в выражениях. Это включает в себя использование логических операторов в контекстах, где, вероятно, ожидается побитовый оператор. Также предупреждает, когда операнды логического оператора совпадают

LINTFLAGS		+= -Wwrite-strings
#предупреждение если при компиляции C присваивайте строковым константам тип const char[size], чтобы при копировании адреса первого элемента в неконстантный указатель char * выдавалось предупреждение

LINTFLAGS		+= -Wcast-align
#предупреждение, когда указатель приводится таким образом, что требуемое выравнивание целевого объекта увеличивается

LINTFLAGS		+= -Wcast-qual
#предупреждение, когда приводится указатель, чтобы удалить определитель типа из целевого типа

LINTFLAGS		+= -Wswitch-default
#предупреждение, когда оператор switch не имеет case default

LINTFLAGS		+= -Wsuggest-attribute=const
#предупреждение о случаях, когда добавление атрибута const может быть полезным

LINTFLAGS		+= -Wsuggest-attribute=noreturn
#предупреждение о случаях, когда добавление атрибута noreturn может быть полезным

LINTFLAGS		+= -Wsuggest-attribute=pure
#предупреждение о случаях, когда добавление атрибута pure может быть полезным

LINTFLAGS		+= -Wdouble-promotion

LINTFLAGS		+= -Werror
#превращает все предупреждения в ошибки.


# #########
#
#	Флаги условной компиляции
#
DFNs		+= _SVID_SOURCE
#Если определить эту макрокоманду, функциональные возможности из SVID, включены также как ANSI C, POSIX.1, и POSIX.2.

DFNs		+= _GNU_SOURCE
#Если определить эту макрокоманду, включены все: ANSI C, POSIX.1, POSIX.2, BSD, SVID, и расширения GNU

CFLAGS		+= $(LINTFLAGS)
